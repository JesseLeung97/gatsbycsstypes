#! /usr/bin/env node
//#region Import
import path from "path";
import fs from "fs";
import readline from "readline";
import generatedFiles from "../gctrecord";
import { logger, lineBuilder, promptWithPlaceholder } from "./util";
//#endregion

//#region Utility
async function confirmRemove() {
    function checkConfirm(confirmInput: string) {
        if(confirmInput === "Y") {
            return true;
        }
        return false;
    }

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    return new Promise((resolve: (shouldProceed: boolean) => void, reject) => {
        rl.question(promptWithPlaceholder({"Are you sure you want to remove all generated definition files? ": false, "(Y/n) ": true}), (input) => {
            if(checkConfirm(input)) {
                logger.startRemovingFiles();
                rl.close();
                resolve(true);
            }
            rl.close();
            resolve(false);
        });
    });
}

async function removeAllGeneratedFiles() {
    console.log(generatedFiles);
    const generatedFilePaths = Object.values(generatedFiles);
    for await (const filePath of generatedFilePaths) {
        fs.unlink(filePath, (err) => {
            if(err !== null) {
                logger.generalError(err);
            }
        });
    }
}

async function regenerateEmptyDefineFile() {
    let fileBuilder = "";
    fileBuilder += lineBuilder(["// This file is autogenerated."]);
    fileBuilder += lineBuilder([`"use strict"; `, `Object.defineProperty(exports, "__esModule", { value: true });`]);
    fileBuilder += lineBuilder(["const generatedFiles = {"]);
    fileBuilder += lineBuilder(["}"]);
    fileBuilder += lineBuilder([]);
    fileBuilder += lineBuilder(["exports.default = generatedFiles;"]);

    const recordFilePath = path.resolve(__dirname, "..", "gctrecord.js");

    fs.writeFile(recordFilePath, fileBuilder, (err) => {
        if(err !== null) {
            logger.generalError(err);
        }
    });
}
//#endregion

//#region Execution
async function main() {
    const shouldProceed = await confirmRemove();
    if(shouldProceed) {
        logger.removingFiles();
        await removeAllGeneratedFiles();
        regenerateEmptyDefineFile();
        logger.finishRemovingFiles();
    } else {
        logger.abortRemove();
    }
}

main();
//#endregion