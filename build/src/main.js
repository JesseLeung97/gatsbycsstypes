#! /usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//#region Import
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
const gctconfig_1 = __importDefault(require("../gctconfig"));
const util_1 = require("./util");
//#endregion
//#region Utility
function getCssFiles(root) {
    let cssFilePaths = [];
    function checkDir(dirPath) {
        if (gctconfig_1.default.IGNORED_FOLDERS.indexOf(path_1.default.resolve(dirPath)) > -1) {
            return;
        }
        if (fs_1.default.statSync(path_1.default.resolve(dirPath)).isFile()) {
            if (path_1.default.extname(dirPath) === gctconfig_1.default.TARGET_FILE_EXT) {
                cssFilePaths.push(dirPath);
            }
            return;
        }
        ;
        fs_1.default.readdirSync(path_1.default.resolve(dirPath)).forEach(dir => {
            checkDir(path_1.default.resolve(dirPath, dir));
        });
    }
    checkDir(root);
    return cssFilePaths;
}
function buildDefinitionFiles(filePaths) {
    return __awaiter(this, void 0, void 0, function* () {
        let generatedFiles = {};
        function buildFile(filePath) {
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function* () {
                let cssClassNames = [];
                const fileStream = fs_1.default.createReadStream(filePath);
                const rl = readline_1.default.createInterface({
                    input: fileStream,
                    crlfDelay: Infinity
                });
                try {
                    for (var rl_1 = __asyncValues(rl), rl_1_1; rl_1_1 = yield rl_1.next(), !rl_1_1.done;) {
                        const line = rl_1_1.value;
                        const className = getCssClassName(line);
                        if (className !== null) {
                            cssClassNames.push(className);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (rl_1_1 && !rl_1_1.done && (_a = rl_1.return)) yield _a.call(rl_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                writeCssDefineFile(cssClassNames, filePath);
            });
        }
        function getCssClassName(line) {
            const regex = RegExp(gctconfig_1.default.TARGET_REGEX);
            line = line.replace(/\s/g, "");
            if (regex.test(line)) {
                gctconfig_1.default.CHARACTERS_TO_REMOVE.forEach(char => {
                    const charRegex = new RegExp(char);
                    line = line.replace(charRegex, "");
                });
                return line;
            }
            return null;
        }
        function writeCssDefineFile(classNames, filePath) {
            let fileBuilder = "";
            fileBuilder += (0, util_1.lineBuilder)(["// This file is autogenerated."]);
            fileBuilder += (0, util_1.lineBuilder)(["declare module \"*.module.css\" {"]);
            fileBuilder += (0, util_1.lineBuilder)(["const classes: {"], 1);
            classNames.forEach(className => {
                fileBuilder += (0, util_1.lineBuilder)([`"${className}"`, ": string,"], 2);
            });
            fileBuilder += (0, util_1.lineBuilder)(["}"], 1);
            fileBuilder += (0, util_1.lineBuilder)([]);
            fileBuilder += (0, util_1.lineBuilder)(["export default classes;"], 1);
            fileBuilder += (0, util_1.lineBuilder)(["}"]);
            const parentDir = path_1.default.resolve(path_1.default.dirname(filePath));
            const newFilePath = path_1.default.resolve(parentDir, "styles.d.ts");
            generatedFiles[filePath] = newFilePath;
            fs_1.default.writeFile(newFilePath, fileBuilder, (err) => {
                if (err !== null) {
                    util_1.logger.generalError(err);
                }
            });
        }
        function writeToDefineFile(fileRecord) {
            let fileBuilder = "";
            fileBuilder += (0, util_1.lineBuilder)(["// This file is autogenerated."]);
            fileBuilder += (0, util_1.lineBuilder)([`"use strict"; `, `Object.defineProperty(exports, "__esModule", { value: true });`]);
            fileBuilder += (0, util_1.lineBuilder)(["const generatedFiles = {"]);
            Object.keys(fileRecord).forEach(cssFilePath => {
                const generatedDefinitionFilePath = generatedFiles[cssFilePath];
                fileBuilder += (0, util_1.lineBuilder)([`"${cssFilePath}": "${generatedDefinitionFilePath}",`], 1);
            });
            fileBuilder += (0, util_1.lineBuilder)(["}"]);
            fileBuilder += (0, util_1.lineBuilder)([]);
            fileBuilder += (0, util_1.lineBuilder)(["exports.default = generatedFiles;"]);
            const recordFilePath = path_1.default.resolve(__dirname, "..", "gctrecord.js");
            fs_1.default.writeFile(recordFilePath, fileBuilder, (err) => {
                if (err !== null) {
                    util_1.logger.generalError(err);
                }
            });
        }
        Promise.all(filePaths.map(path => buildFile(path))).then(_ => {
            writeToDefineFile(generatedFiles);
        });
    });
}
//#endregion
//#region Execution
function main() {
    util_1.logger.startGeneratingFiles();
    if (!gctconfig_1.default.IS_INITIALIZED) {
        util_1.logger.notInitialized();
        return;
    }
    const cssFiles = getCssFiles(gctconfig_1.default.APP_ROOT);
    buildDefinitionFiles(cssFiles);
    util_1.logger.finishGeneratingFiles();
}
main();
//#endregion
