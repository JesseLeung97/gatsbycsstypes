#! /usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//#region Import
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
const gctrecord_1 = __importDefault(require("../gctrecord"));
const util_1 = require("./util");
//#endregion
//#region Utility
function confirmRemove() {
    return __awaiter(this, void 0, void 0, function* () {
        function checkConfirm(confirmInput) {
            if (confirmInput === "Y") {
                return true;
            }
            return false;
        }
        const rl = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        return new Promise((resolve, reject) => {
            rl.question((0, util_1.promptWithPlaceholder)({ "Are you sure you want to remove all generated definition files? ": false, "(Y/n) ": true }), (input) => {
                if (checkConfirm(input)) {
                    util_1.logger.startRemovingFiles();
                    rl.close();
                    resolve(true);
                }
                rl.close();
                resolve(false);
            });
        });
    });
}
function removeAllGeneratedFiles() {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        console.log(gctrecord_1.default);
        const generatedFilePaths = Object.values(gctrecord_1.default);
        try {
            for (var generatedFilePaths_1 = __asyncValues(generatedFilePaths), generatedFilePaths_1_1; generatedFilePaths_1_1 = yield generatedFilePaths_1.next(), !generatedFilePaths_1_1.done;) {
                const filePath = generatedFilePaths_1_1.value;
                fs_1.default.unlink(filePath, (err) => {
                    if (err !== null) {
                        util_1.logger.generalError(err);
                    }
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (generatedFilePaths_1_1 && !generatedFilePaths_1_1.done && (_a = generatedFilePaths_1.return)) yield _a.call(generatedFilePaths_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
function regenerateEmptyDefineFile() {
    return __awaiter(this, void 0, void 0, function* () {
        let fileBuilder = "";
        fileBuilder += (0, util_1.lineBuilder)(["// This file is autogenerated."]);
        fileBuilder += (0, util_1.lineBuilder)([`"use strict"; `, `Object.defineProperty(exports, "__esModule", { value: true });`]);
        fileBuilder += (0, util_1.lineBuilder)(["const generatedFiles = {"]);
        fileBuilder += (0, util_1.lineBuilder)(["}"]);
        fileBuilder += (0, util_1.lineBuilder)([]);
        fileBuilder += (0, util_1.lineBuilder)(["exports.default = generatedFiles;"]);
        const recordFilePath = path_1.default.resolve(__dirname, "..", "gctrecord.js");
        fs_1.default.writeFile(recordFilePath, fileBuilder, (err) => {
            if (err !== null) {
                util_1.logger.generalError(err);
            }
        });
    });
}
//#endregion
//#region Execution
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const shouldProceed = yield confirmRemove();
        if (shouldProceed) {
            util_1.logger.removingFiles();
            yield removeAllGeneratedFiles();
            regenerateEmptyDefineFile();
            util_1.logger.finishRemovingFiles();
        }
        else {
            util_1.logger.abortRemove();
        }
    });
}
main();
//#endregion
